// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Results.API.Data;

#nullable disable

namespace Results.API.Migrations
{
    [DbContext(typeof(ResultsDbContext))]
    partial class ResultsDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Results.API.Models.Card", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AwayFault")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CardType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HomeFault")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ResultId")
                        .HasColumnType("int");

                    b.Property<string>("TimeReceived")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ResultId");

                    b.ToTable("Cards");
                });

            modelBuilder.Entity("Results.API.Models.Goalscorer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AwayAssist")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AwayScorer")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HomeAssist")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HomeScorer")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ResultId")
                        .HasColumnType("int");

                    b.Property<string>("Score")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TimeScored")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ResultId");

                    b.ToTable("Goalscorers");
                });

            modelBuilder.Entity("Results.API.Models.Result", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AwayTeamBadge")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("AwayTeamId")
                        .HasColumnType("int");

                    b.Property<string>("AwayTeamName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("AwayTeamScore")
                        .HasColumnType("int");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("HomeTeamBadge")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("HomeTeamId")
                        .HasColumnType("int");

                    b.Property<string>("HomeTeamName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("HomeTeamScore")
                        .HasColumnType("int");

                    b.Property<int>("MatchId")
                        .HasColumnType("int");

                    b.Property<int>("Round")
                        .HasColumnType("int");

                    b.Property<int?>("SubstitutionsId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Time")
                        .HasColumnType("datetime2");

                    b.Property<bool>("isMatchLive")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("SubstitutionsId");

                    b.ToTable("Results");
                });

            modelBuilder.Entity("Results.API.Models.SubAway", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("SubsId")
                        .HasColumnType("int");

                    b.Property<string>("Substitution")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Time")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("SubsId");

                    b.ToTable("SubsAway");
                });

            modelBuilder.Entity("Results.API.Models.SubHome", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("SubsId")
                        .HasColumnType("int");

                    b.Property<string>("Substitution")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Time")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("SubsId");

                    b.ToTable("SubsHome");
                });

            modelBuilder.Entity("Results.API.Models.Subs", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.HasKey("Id");

                    b.ToTable("Subs");
                });

            modelBuilder.Entity("Results.API.Models.Table", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.HasKey("Id");

                    b.ToTable("Tables");
                });

            modelBuilder.Entity("Results.API.Models.TableTeam", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Draws")
                        .HasColumnType("int");

                    b.Property<int>("GoalsA")
                        .HasColumnType("int");

                    b.Property<int>("GoalsDiff")
                        .HasColumnType("int");

                    b.Property<int>("GoalsF")
                        .HasColumnType("int");

                    b.Property<int>("Loses")
                        .HasColumnType("int");

                    b.Property<int>("Played")
                        .HasColumnType("int");

                    b.Property<int>("Points")
                        .HasColumnType("int");

                    b.Property<int?>("TableId")
                        .HasColumnType("int");

                    b.Property<string>("TeamBadge")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TeamId")
                        .HasColumnType("int");

                    b.Property<string>("TeamName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Wins")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TableId");

                    b.ToTable("TableTeams");
                });

            modelBuilder.Entity("Results.API.Models.Card", b =>
                {
                    b.HasOne("Results.API.Models.Result", null)
                        .WithMany("Cards")
                        .HasForeignKey("ResultId");
                });

            modelBuilder.Entity("Results.API.Models.Goalscorer", b =>
                {
                    b.HasOne("Results.API.Models.Result", null)
                        .WithMany("GoalScorers")
                        .HasForeignKey("ResultId");
                });

            modelBuilder.Entity("Results.API.Models.Result", b =>
                {
                    b.HasOne("Results.API.Models.Subs", "Substitutions")
                        .WithMany()
                        .HasForeignKey("SubstitutionsId");

                    b.Navigation("Substitutions");
                });

            modelBuilder.Entity("Results.API.Models.SubAway", b =>
                {
                    b.HasOne("Results.API.Models.Subs", null)
                        .WithMany("AwaySubs")
                        .HasForeignKey("SubsId");
                });

            modelBuilder.Entity("Results.API.Models.SubHome", b =>
                {
                    b.HasOne("Results.API.Models.Subs", null)
                        .WithMany("HomeSubs")
                        .HasForeignKey("SubsId");
                });

            modelBuilder.Entity("Results.API.Models.TableTeam", b =>
                {
                    b.HasOne("Results.API.Models.Table", null)
                        .WithMany("Teams")
                        .HasForeignKey("TableId");
                });

            modelBuilder.Entity("Results.API.Models.Result", b =>
                {
                    b.Navigation("Cards");

                    b.Navigation("GoalScorers");
                });

            modelBuilder.Entity("Results.API.Models.Subs", b =>
                {
                    b.Navigation("AwaySubs");

                    b.Navigation("HomeSubs");
                });

            modelBuilder.Entity("Results.API.Models.Table", b =>
                {
                    b.Navigation("Teams");
                });
#pragma warning restore 612, 618
        }
    }
}
